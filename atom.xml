<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>emplay</title>
  
  <subtitle>嘟爸知识库</subtitle>
  <link href="https://blog.emplay.top/atom.xml" rel="self"/>
  
  <link href="https://blog.emplay.top/"/>
  <updated>2022-08-02T10:00:01.457Z</updated>
  <id>https://blog.emplay.top/</id>
  
  <author>
    <name>emplay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用dbt5进行TPC-E测试</title>
    <link href="https://blog.emplay.top/2022/07/20/%E4%BD%BF%E7%94%A8dbt5%E8%BF%9B%E8%A1%8CTPC-E%E6%B5%8B%E8%AF%95/"/>
    <id>https://blog.emplay.top/2022/07/20/%E4%BD%BF%E7%94%A8dbt5%E8%BF%9B%E8%A1%8CTPC-E%E6%B5%8B%E8%AF%95/</id>
    <published>2022-07-20T00:00:00.000Z</published>
    <updated>2022-08-02T10:00:01.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用dbt5进行TPC-E测试"><a href="#使用dbt5进行TPC-E测试" class="headerlink" title="使用dbt5进行TPC-E测试"></a>使用dbt5进行TPC-E测试</h1><p>使用工具：dbt5、hgdb4.5.7</p><p>dbt5下载路径：<a href="https://github.com/osdldbt/dbt5">https://github.com/osdldbt/dbt5</a></p><p>hgdb4.5.7自行安装</p><h2 id="编译安装R语言"><a href="#编译安装R语言" class="headerlink" title="编译安装R语言"></a>编译安装R语言</h2><p>dbt5生成测试报告时需要用到Python及R语言，一般操作系统默认安装Python2.7版本，可以直接使用该版本，生成测试报告时，需要使用Python调用R语言的功能，不要使用最新的R语言版本。此处选择的是与Python2.7及dbt5差多时间的R语言版本</p><p>R语言下载路径：<a href="https://mirrors.tuna.tsinghua.edu.cn/CRAN/src/base/R-3/R-3.0.1.tar.gz">https://mirrors.tuna.tsinghua.edu.cn/CRAN/src/base/R-3/R-3.0.1.tar.gz</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#R语言编译安装过程比较比较简单，没啥可说的</span></span><br><span class="line">tar -zxf R-3.0.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> R-3.0.1</span><br><span class="line">./configure --prefix=/usr/local/R3 --with-gnu-ld --with-cairo  --with-x --enable-R-shlib</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment">#R语言的</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/R3/lib64/R/etc/ /usr/local/R3/etc</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/R3/lib64/R/lib /usr/local/R3/lib</span><br></pre></td></tr></table></figure><h2 id="编译安装Python插件rpy2"><a href="#编译安装Python插件rpy2" class="headerlink" title="编译安装Python插件rpy2"></a>编译安装Python插件rpy2</h2><p>Python缺少时间序列分析的包，做分析很不方便，R语言有很多分析用的包，可以在使用Python时，将R语言作为一个附属部分使用。简单说就是使用rpy2可以直接用Python调用R的功能。</p><p>因为用的Python2.7，rpy2也需要选择早期版本，这里使用的是与R3.0.1同一时期的版本2.4.0</p><p>下载路径：<a href="https://github.com/rpy2/rpy2/releases/tag/RELEASE_2_4_0">https://github.com/rpy2/rpy2/releases/tag/RELEASE_2_4_0</a></p><p>编译安装过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#RELEASE_2_4_0.tar.gz下载下来就叫这名字</span></span><br><span class="line">tar -zxf RELEASE_2_4_0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> rpy2-RELEASE_2_4_0</span><br><span class="line"><span class="comment">#此处不用参考网上教程，注释extern void Rf_PrintWarnings(void)等内容，那是rpy2 2.3及之前版本的问题，2.4版本已经修复，直接安装即可。</span></span><br><span class="line">python setup.py build --r-home /usr/local/R3/lib64/R/ install</span><br></pre></td></tr></table></figure><h2 id="编译安装dbt5"><a href="#编译安装dbt5" class="headerlink" title="编译安装dbt5"></a>编译安装dbt5</h2><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加载数据库环境变量</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment">#dbt5使用的cmake，需要事先安装</span></span><br><span class="line">yum install cmake</span><br><span class="line"><span class="comment">#下载dbt5源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/osdldbt/dbt5 dbt5</span><br><span class="line"><span class="comment">#切换到dbt5目录</span></span><br><span class="line"><span class="built_in">cd</span> dbt5</span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line">cmake CMakeLists.txt -DDBMS=pgsql</span><br><span class="line"><span class="comment">#安装dbt5，DESTDIR后指定安装路径：/opt/dbt-5，此处可能会报错，报错解决方法见下面注意部分</span></span><br><span class="line">make install DESTDIR=/opt/dbt-5</span><br><span class="line"><span class="comment">#编译EGen</span></span><br><span class="line"><span class="built_in">cd</span> dbt5/egen/prj</span><br><span class="line">make -f Makefile.pgsql</span><br><span class="line"><span class="comment">#编译安装存储过程到数据库安装目录</span></span><br><span class="line"><span class="built_in">cd</span> dbt5/storedproc/pgsql/c</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h3><p><em><strong>注意：如果make install时报如下错误</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s4 dbt5]<span class="comment"># make install</span></span><br><span class="line">[  1%] Building CXX object CMakeFiles/bin/BrokerageHouseMain.<span class="built_in">dir</span>/src/interfaces/TxnHarnessSendToMarket.o</span><br><span class="line">In file included from src/include/TxnHarnessSendToMarket.h:17:0,</span><br><span class="line">                 from /opt/dbt5/src/interfaces/TxnHarnessSendToMarket.cpp:11:</span><br><span class="line">src/include/CSocket.h: In member <span class="keyword">function</span> ‘void CSocket::closeListenerSocket()’:</span><br><span class="line">src/include/CSocket.h:42:47: error: ‘close’ was not declared <span class="keyword">in</span> this scope</span><br><span class="line">  void <span class="function"><span class="title">closeListenerSocket</span></span>() &#123; close(m_listenfd); &#125;</span><br><span class="line">                                               ^</span><br><span class="line">make[2]: *** [CMakeFiles/bin/BrokerageHouseMain.<span class="built_in">dir</span>/src/interfaces/TxnHarnessSendToMarket.o] Error 1</span><br><span class="line">make[1]: *** [CMakeFiles/bin/BrokerageHouseMain.<span class="built_in">dir</span>/all] Error 2</span><br><span class="line">make: *** [all] Error 2</span><br></pre></td></tr></table></figure><p><em><strong>处理方式：修改文件dbt5&#x2F;src&#x2F;include&#x2F;CSocket.h，添加“#include &lt;unistd.h&gt;”</strong></em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vi src/include/CSocket.h</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CThreadErr.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MiscConsts.h&quot;</span></span></span><br><span class="line"><span class="comment">/*添加如下内容*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h3><p>编译完成后，可执行文件在dbt5下的bin目录中，列表即部分文件功能如下，主要用到是dbt5-pgsql-build-db、dbt5-run-workload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s4 bin]<span class="comment"># pwd</span></span><br><span class="line">/opt/dbt-5/bin</span><br><span class="line">[root@k8s4 bin]<span class="comment"># ll</span></span><br><span class="line">total 10684</span><br><span class="line">-rwxr-xr-x 1 root root 1490512 Jun 14 16:13 BrokerageHouseMain      <span class="comment">#模拟券商</span></span><br><span class="line">-rwxr-xr-x 1 root root    9923 Jun  9 14:44 dbt5-generate-report</span><br><span class="line">-rwxr-xr-x 1 root root     416 Jun  9 14:44 dbt5-get-os-info</span><br><span class="line">-rwxr-xr-x 1 root root     612 Jun  9 14:44 dbt5-pgsql-backup-db</span><br><span class="line">-rwxr-xr-x 1 root root    3490 Jun  9 14:44 dbt5-pgsql-build-db    <span class="comment">#创建测试数据库，写入测试数据</span></span><br><span class="line">-rwxr-xr-x 1 root root    2717 Jun  9 14:44 dbt5-pgsql-check-db</span><br><span class="line">-rwxr-xr-x 1 root root    1374 Jun  9 14:44 dbt5-pgsql-create-db</span><br><span class="line">-rwxr-xr-x 1 root root   30291 Jun  9 14:44 dbt5-pgsql-create-indexes</span><br><span class="line">-rwxr-xr-x 1 root root   22206 Jun  9 14:44 dbt5-pgsql-create-tables</span><br><span class="line">-rwxr-xr-x 1 root root   22590 Jun  9 14:44 dbt5-pgsql-db-plans</span><br><span class="line">-rwxr-xr-x 1 root root    3824 Jun  9 14:44 dbt5-pgsql-db-stat</span><br><span class="line">-rwxr-xr-x 1 root root     521 Jun  9 14:44 dbt5-pgsql-drop-db</span><br><span class="line">-rwxr-xr-x 1 root root    2753 Jun  9 14:44 dbt5-pgsql-drop-tables</span><br><span class="line">-rwxr-xr-x 1 root root    1736 Jun  9 14:44 dbt5-pgsql-load-stored-procs</span><br><span class="line">-rwxr-xr-x 1 root root     618 Jun  9 14:44 dbt5-pgsql-restore-db</span><br><span class="line">-rwxr-xr-x 1 root root    1061 Jun  9 14:44 dbt5-pgsql-start-db</span><br><span class="line">-rwxr-xr-x 1 root root     470 Jun  9 14:44 dbt5-pgsql-stop-db</span><br><span class="line">-rwxr-xr-x 1 root root    4024 Jun  9 14:44 dbt5-plot-transaction-rate</span><br><span class="line">-rwxr-xr-x 1 root root    5094 Jun  9 14:44 dbt5-post-process       <span class="comment">#生成测试报告</span></span><br><span class="line">-rwxr-xr-x 1 root root   19029 Jun  9 14:44 dbt5-run-workload       <span class="comment">#运行测试</span></span><br><span class="line">-rwxr-xr-x 1 root root    2509 Jun  9 14:44 dbt5-sysstats</span><br><span class="line">-rwxr-xr-x 1 root root 3115456 Jun 14 16:14 DriverMain              <span class="comment">#模拟客户端</span></span><br><span class="line">-rwxr-xr-x 1 root root 1949824 Jun 14 16:15 MarketExchangeMain      <span class="comment">#模拟交易所</span></span><br><span class="line">-rwxr-xr-x 1 root root 4196000 Jun 14 16:17 TestTxn</span><br></pre></td></tr></table></figure><h2 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h2><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>以下环境变量根据实际情况进行修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据库环境变量内容如下，如果加载过就不用加载了，要注意写上PGUSER</span></span><br><span class="line"><span class="built_in">export</span> HG_BASE=/opt/pg14</span><br><span class="line"><span class="built_in">export</span> HGDB_HOME=/opt/pg14</span><br><span class="line"><span class="built_in">export</span> PGPORT=5432</span><br><span class="line"><span class="built_in">export</span> PGDATABASE=postgres</span><br><span class="line"><span class="built_in">export</span> PGDATA=<span class="variable">$HGDB_HOME</span>/data</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HGDB_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PGUSER=postgres</span><br><span class="line"><span class="comment">#dbt5环境变量</span></span><br><span class="line"><span class="built_in">export</span> EGENDIR=/opt/dbt5/egen</span><br><span class="line"><span class="built_in">export</span> DBT5DBNAME=dbt5</span><br><span class="line"><span class="built_in">export</span> DBT5PGDATA=/data/hgdb457</span><br><span class="line"><span class="built_in">export</span> DBT5TSDIR=/opt/dbt5</span><br><span class="line"><span class="built_in">export</span> DBT5_HOME=/opt/dbt5</span><br><span class="line"><span class="built_in">export</span> PATH=:<span class="variable">$DBT5_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#R语言环境变量</span></span><br><span class="line"><span class="built_in">export</span> R_HOME=/usr/local/R3/lib64/R</span><br><span class="line"><span class="built_in">export</span> PATH=:<span class="variable">$R_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/R3/lib64/R/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="comment">#把密码写到环境变量中，写到pgpass中，测试过程中要求输入密码</span></span><br><span class="line"><span class="built_in">export</span> PGPASSWORD=Qwert@1234</span><br></pre></td></tr></table></figure><h3 id="创建测试数据库"><a href="#创建测试数据库" class="headerlink" title="创建测试数据库"></a>创建测试数据库</h3><p>使用dbt5-pgsql-build-db命令创建测试数据库及生成测试数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dbt5-pgsql-build-db帮助信息</span></span><br><span class="line">[root@k8s4 bin]<span class="comment"># dbt5-pgsql-build-db -h</span></span><br><span class="line">Usage:</span><br><span class="line">    ./dbt5-pgsql-build-db [option]</span><br><span class="line">    ./dbt5-pgsql-build-db -h</span><br><span class="line">Options:</span><br><span class="line">    -b &lt;<span class="built_in">integer</span>&gt; </span><br><span class="line">        Beginning customer ordinal position</span><br><span class="line">        设置客户起始编号，默认从1开始</span><br><span class="line">    -c &lt;<span class="built_in">integer</span>&gt;</span><br><span class="line">        Number of customers <span class="keyword">for</span> this instance</span><br><span class="line">        生成的测试数据中有多少个客户账号，默认5000</span><br><span class="line">    -d &lt;dbname&gt;</span><br><span class="line">        PGDATABASE name</span><br><span class="line">        数据库名称</span><br><span class="line">    -h</span><br><span class="line">        this <span class="built_in">help</span></span><br><span class="line">    -i &lt;path&gt;</span><br><span class="line">        Path to EGen</span><br><span class="line">        EGen的路径，不指定使用环境变量中的设置</span><br><span class="line">    -l &lt;port&gt;</span><br><span class="line">        database port</span><br><span class="line">        数据库端口</span><br><span class="line">    -p &lt;database_parameters&gt;</span><br><span class="line">        PostgreSQL database parameters</span><br><span class="line">        指定数据库参数</span><br><span class="line">    -r</span><br><span class="line">        Drop existing database before building a new database</span><br><span class="line">        创建新库时，如果已经存在，则删掉已存在的数据库</span><br><span class="line">    -s &lt;scale fact (customers per 1 trtps)</span><br><span class="line">        比例因子，每个客户操作通过是1trtps，具体怎么调节还不明白，默认值500</span><br><span class="line">    -t &lt;<span class="built_in">integer</span>&gt;</span><br><span class="line">        Number of customers (total)</span><br><span class="line">        客户端数量</span><br><span class="line">    -u</span><br><span class="line">        Use tablespaces</span><br><span class="line">        表示使用表空间，好像没啥用</span><br><span class="line">    -w &lt;days&gt;</span><br><span class="line">        Initial trade days (business days) to populate</span><br><span class="line">        初始化多少天的交易数据，默认300天</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成测试数据，环境变量设置好后，会自动初始化、创建数据库、写入测试数据，通过设置交易数据的天数，控制数据量，100天数据量约5G</span></span><br><span class="line">[root@k8s4 bin]<span class="comment"># dbt5-pgsql-build-db -l 5457 -c 1000 -t 1000 -w 100</span></span><br><span class="line">Creating database...</span><br><span class="line">=======================================</span><br><span class="line">PGData directory /data/hgdb457 already exists</span><br><span class="line">Skipping initdb</span><br><span class="line">=======================================</span><br><span class="line">Database is already started.</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>使用命令dbt5-run-workload进行测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dbt5-run-workload帮助选项</span></span><br><span class="line">[root@k8s4 bin]<span class="comment"># dbt5-run-workload -h</span></span><br><span class="line">./dbt5-run-workload: option requires an argument -- h</span><br><span class="line"></span><br><span class="line">error: specify <span class="built_in">which</span> dbms system to <span class="built_in">test</span> using -a &lt;pgsql&gt;</span><br><span class="line"></span><br><span class="line">usage: run_workload.sh -c &lt;number of customers&gt; -d &lt;duration of <span class="built_in">test</span>&gt; -u &lt;number of <span class="built_in">users</span>&gt;</span><br><span class="line">必选项：-c 客户数，跟加载数据时一样；-d 运行时间，单位秒；-u 同时跑多少用户，相当于数据库上的会话数</span><br><span class="line">other options:</span><br><span class="line">       -a &lt;pgsql&gt;   指定数据库类型，这里只有一个选项pg</span><br><span class="line">       -b &lt;database parameters&gt;    设置数据库启动参数，忽略就好</span><br><span class="line">       -f &lt;scale <span class="built_in">factor</span>. (default 500)&gt;       比例因子</span><br><span class="line">       -h &lt;database host name. (default localhost)&gt;   数据库地址，一定要写，本机也要写localhost，不然不连数据库，原因未知</span><br><span class="line">       -i &lt;egen_path&gt;       egen的路径</span><br><span class="line">       -l &lt;pacing delay. (default 0)&gt;      延迟，可能是交易峰谷间的延迟，默认0</span><br><span class="line">       -n &lt;database name. (default dbt5)&gt;   数据库名称，不写默认dbt5</span><br><span class="line">       -o &lt;result output <span class="built_in">dir</span>&gt;               结果存放路径，会自动生成一个目录</span><br><span class="line">       -p &lt;database port number. (default 5432)&gt;     数据库端口</span><br><span class="line">       -q &lt;event1,[event2,...]&gt; (Linux perf events)     Linux性能事件，调用的是perf命令，感兴趣的自己研究吧</span><br><span class="line">       -r &lt;random number seed, invalidates <span class="built_in">test</span>&gt;        随机数种子，无效测试。没明白是做什么的，需要的可也翻一下源码</span><br><span class="line">       -s &lt;delay between starting threads <span class="keyword">in</span> milliseconds (default 1000)&gt;  启动线程间的延迟时间，默认1000ms</span><br><span class="line">       -t &lt;customers total&gt;          测试使用的客户数</span><br><span class="line">       -w &lt;initial trade days. (default 300)&gt;   初始交易天数，应该是小于等于生成数据时的天数</span><br><span class="line">       -x (oprofile)          是否使用oprofile进行性能分析，选择了还需要装oprofile，太麻烦了，没测试</span><br><span class="line">       -y (readprofile)       是否readprofile跟踪内核性能，同样需要安装，未测试</span><br><span class="line">       -z &lt;comment describing this <span class="built_in">test</span> run&gt;       给本次测试写个注释吧</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个简单测试</span></span><br><span class="line">[root@k8s4 bin]<span class="comment"># dbt5-run-workload -a pgsql -c 1000 -t 1000 -d 120 -u 5 -f 1000 -w 100 -p 5457 -n dbt5 -h localhost -o ./results</span></span><br><span class="line">waiting <span class="keyword">for</span> server to start.... <span class="keyword">done</span></span><br><span class="line">server started</span><br><span class="line"></span><br><span class="line">************************************************************************</span><br><span class="line">*                  DBT-5 <span class="built_in">test</span> started                                  *</span><br><span class="line">*                                                                      *</span><br><span class="line">************************************************************************</span><br><span class="line">*                                                                      *</span><br><span class="line">*  Test consists of 4 stages:                                          *</span><br><span class="line">*                                                                      *</span><br><span class="line">*  1. Start of the Brokerage House server                              *</span><br><span class="line">*  2. Start of the Market Exchange server                              *</span><br><span class="line">*  3. Test (Start of the Customer Emulator)                            *</span><br><span class="line">*  4. Processing of results                                            *</span><br><span class="line">*                                                                      *</span><br><span class="line">************************************************************************</span><br><span class="line">Results can be found <span class="keyword">in</span>: ./results</span><br><span class="line"></span><br><span class="line">1. Starting Brokerage House server</span><br><span class="line">Sleeping 1 seconds</span><br><span class="line"></span><br><span class="line">2. Starting Market Exchange server</span><br><span class="line"></span><br><span class="line">3. Starting Customer driver: 5 user(s)</span><br><span class="line">   1 user starting every 1000 milliseconds...</span><br><span class="line">Results will be written to: ./results</span><br><span class="line">Sleeping 6 seconds</span><br><span class="line">Sleeping 120 seconds</span><br><span class="line"></span><br><span class="line">4. Run Post processing analyses</span><br><span class="line">Killing Servers...</span><br><span class="line">waiting <span class="keyword">for</span> server to shut down........ <span class="keyword">done</span></span><br><span class="line">server stopped</span><br><span class="line">&gt;&gt; Test completed.</span><br><span class="line">Results are <span class="keyword">in</span>: ./results</span><br><span class="line"></span><br><span class="line">                          Response Time</span><br><span class="line">                            (seconds)</span><br><span class="line">Transaction             % Average: 90th %   Total Rollbacks    % Warning Invalid</span><br><span class="line">----------------- ------- --------------- ------- -------------- ------- -------</span><br><span class="line">Trade Result        8.309     nan:  0.018    3355      0   0.00%       0       0</span><br><span class="line">Broker Volume       4.998     nan:  0.007    2018      0   0.00%       0       0</span><br><span class="line">Customer Position  13.282     nan:  0.025    5363      0   0.00%       0       0</span><br><span class="line">Market Feed         0.763     nan:  0.014     336     28   8.33%       0       0</span><br><span class="line">Market Watch        0.166     nan:  0.006    7439   7372  99.10%       0       0</span><br><span class="line">Security Detail     0.396     nan:  0.007    5777   5617  97.23%       0     160</span><br><span class="line">Trade Lookup        8.141     nan:  0.111    3287      0   0.00%       0       0</span><br><span class="line">Trade Order        10.211     nan:  0.015    4164     41   0.98%       0       0</span><br><span class="line">Trade Status       19.338     nan:  0.040    7808      0   0.00%       0       0</span><br><span class="line">Trade Update        2.051     nan:  0.141     828      0   0.00%       0       0</span><br><span class="line">Data Maintenance      N/A     nan:  0.011       2      0   0.00%       0       0</span><br><span class="line">----------------- ------- --------------- ------- -------------- ------- -------</span><br><span class="line">27.96 trade-result transactions per second (trtps)</span><br><span class="line">0.1 minute(s) to ramp up</span><br><span class="line">2.0 minute steady state duration</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果查看，整体内容稍微有点复杂，可以只简单看倒数第三行，即：27.96 trade-result transactions per second (trtps)，这里表示性能指标(tpsE， transactions per second E)和性价比(美元&#x2F;tpsE)，分值越大，性能越好。其他根据字面意思理解就好。</p><h2 id="TPC-E及dbt5简单介绍"><a href="#TPC-E及dbt5简单介绍" class="headerlink" title="TPC-E及dbt5简单介绍"></a>TPC-E及dbt5简单介绍</h2><h3 id="什么是TPC-E"><a href="#什么是TPC-E" class="headerlink" title="什么是TPC-E"></a>什么是TPC-E</h3><p>TPC 测试基准 E (下文称 TPC-E) 是由事务处理性能委员会 (下称 TPC) 开发的一个新的用于测试 OLTP 负载的测试基准(基准于 2007 年被审核通过)。 TPC-E 通过模拟了证券交易公司的业务来测试数据库的 OLTP 性能。TPC-E 测试的重点是数据库，更多关注的是这个数据库处理来自证券公司和其客户账号的相关交易。 尽管在 TPC-E 测试基准之下的业务模型是一个证券公司的业务，但是数据库的表结构和数据分布，以及交易本身和实现规则都是尽最大程度的测试当下的 OLTP 数据库系统。</p><h3 id="与TPCC的区别"><a href="#与TPCC的区别" class="headerlink" title="与TPCC的区别"></a>与TPCC的区别</h3><p>关键的区别是，TPC-E 基准配置将更像一个真实客户会实际使用的配置。 这意味着基准测试中使用的软件和硬件配置应与客户端使用的软件相似或相同。 TPC-C 配置的绝对大小不能反映典型的客户端配置。 </p><p>TPC-C模拟了批发分销商，拥有少量库存库存充足的仓库，为大量零售点提供服务，在这个场景下，通过衡量每分钟交易数（TPMC）表示性能情况。这种场景严重依赖磁盘IO。</p><p>TPC-E模拟了证券交易场景，使用由波动的股票价格驱动增加场景复杂度，同事模拟客户下单、限价交易、止损等场景。TPC-E场景更符合最新的OLTP场景，对磁盘IO性能比TPC-C低。</p><p>TPC-H用于测试OLAP场景，此处不介绍了。</p><h3 id="什么是dbt5"><a href="#什么是dbt5" class="headerlink" title="什么是dbt5"></a>什么是dbt5</h3><p>简单来说dbt5就是TPC-E基准测试规范的一个实现。作为Google Summer of Code 2006中的一个项目，由Rilson Nascimento开发，由Mark Wong担任导师。</p><h2 id="dbt5架构"><a href="#dbt5架构" class="headerlink" title="dbt5架构"></a>dbt5架构</h2><p>业务架构</p><p><img src="/images/%E4%BD%BF%E7%94%A8dbt5%E8%BF%9B%E8%A1%8CTPC-E%E6%B5%8B%E8%AF%95_1.png" alt="image"></p><p>设计架构</p><p><img src="/images/%E4%BD%BF%E7%94%A8dbt5%E8%BF%9B%E8%A1%8CTPC-E%E6%B5%8B%E8%AF%95_2.png" alt="image"></p><h2 id="dbt5中的表"><a href="#dbt5中的表" class="headerlink" title="dbt5中的表"></a>dbt5中的表</h2><table><thead><tr><th>类别</th><th>表名</th><th>注释</th></tr></thead><tbody><tr><td>客户相关</td><td>ACCOUNT_PERMISSION</td><td>客户账目许可表</td></tr><tr><td></td><td>CUSTOMER</td><td>客户信息表</td></tr><tr><td></td><td>CUSTOMER_ACCOUNT</td><td>客户账目表</td></tr><tr><td></td><td>CUSTOMER_TAXRATE</td><td>客户税率表</td></tr><tr><td></td><td>HOLDING</td><td>客户股票持有表</td></tr><tr><td></td><td>HOLDING_HISTORY</td><td>客户股票持有历史表</td></tr><tr><td></td><td>HOLDING_SUMMARY</td><td>客户股票持有总表</td></tr><tr><td></td><td>WATCH_ITEM</td><td>客户观察证券列表</td></tr><tr><td>经纪人相关</td><td>BROKER</td><td>经纪人表</td></tr><tr><td></td><td>CASH_TRANSACTION</td><td>现金交易表</td></tr><tr><td></td><td>CHARGE</td><td>交易费用表</td></tr><tr><td></td><td>COMMISSION_RATE</td><td>佣金率表</td></tr><tr><td></td><td>SETTLEMENT</td><td>结算表</td></tr><tr><td></td><td>SETTLEMENT</td><td>结算表</td></tr><tr><td></td><td>TRADE_HISTORY</td><td>交易历史表</td></tr><tr><td></td><td>TRADE_REQUEST</td><td>交易请求表</td></tr><tr><td></td><td>TRADE_TYPE</td><td>交易类型表</td></tr><tr><td>交易所相关</td><td>COMPANY</td><td>公司表</td></tr><tr><td></td><td>COMPANY_COMPETITOR</td><td>公司竞争者表</td></tr><tr><td></td><td>DAILY_MARKET</td><td>日常市场统计表</td></tr><tr><td></td><td>EXCHANGE</td><td>交易所表</td></tr><tr><td></td><td>FINANCIAL</td><td>财政表</td></tr><tr><td></td><td>INDUSTRY</td><td>行业表</td></tr><tr><td></td><td>LAST_TRADE</td><td>最后交易表</td></tr><tr><td></td><td>NEWS_ITEM</td><td>新闻项表</td></tr><tr><td></td><td>NEWS_XREF</td><td>公司新闻参照表</td></tr><tr><td></td><td>SECTOR</td><td>公司领域表</td></tr><tr><td></td><td>SECURITY</td><td>证券表</td></tr><tr><td>其他类别</td><td>ADDRESS</td><td>地址表</td></tr><tr><td></td><td>STATUS_TYPE</td><td>交易状态表</td></tr><tr><td></td><td>TAXRATE</td><td>税率表</td></tr><tr><td></td><td>ZIP_CODE</td><td>邮政编码表</td></tr></tbody></table><p>TPC-E标准中定义的事务有12种，每个事务对应数据库管理系统中的一个或多个带输入和输出参数的存储过程，单个存储过程叫做一个事务帧。事务的种类有如下几种：</p><ol><li>Broker-Volume：经纪人交易统计事务，包含1个事务帧；</li><li>Customer-Position：客户价值统计事务，包含3个事务帧；</li><li>Market-Watch：市场观察事务，包含1个事务帧；</li><li>Security-Detail：证券信息事务，包含1个事务帧；</li><li>Trade-Lookup：交易查询事务，包含4个事务帧；</li><li>Trade-Order：交易执行事务，包含6个事务帧；</li><li>Trade-Status：交易状态事务，包含1个事务帧；</li><li>Trade-Update：交易修正事务，包含3个事务帧；</li><li>Market-Feed：市场跟踪事务，包含1个事务帧，该事务由TradeOrder事务引起；</li><li>Trade-Result：交易结果更新事务，包含6个事务帧，该事务由TradeOrder事务引起；</li><li>Data-Maintenance：数据维护事务，包含1个事务帧，每60秒执行一次；</li><li>Trade-Cleanup：交易清理事务，包含1个事务帧，测试开始时执行一次，不强制使用。</li></ol><p>前8种事务由证券公司执行，第9-10号事务由交易所执行，最后两种事务属于数据库维护事务，与客户操作无关。</p><h3 id="dbt5的优缺点"><a href="#dbt5的优缺点" class="headerlink" title="dbt5的优缺点"></a>dbt5的优缺点</h3><p>优点：</p><p>1、主程序使用C++编写，速度较快</p><p>2、提供了完整的测试数据</p><p>3、场景比benchmarkSQL更复杂，更贴近现实使用的业务系统</p><p>4、监控手段多样，信息详细，可以直接生产漂亮的报告格式</p><p>5、使用Libpq连接数据库，理论速度更快</p><p>6、GitHub上已经有了支持docker的更新，可以打包成docker镜像</p><p>7、复杂的场景可以用来作为pg优化的练手程序</p><p>缺点：</p><p>1、安装配置较复杂，使用的语言包括shell、Python、R、C++</p><p>2、没有服务端程序没有使用连接池，不能对数据库进行极限压测。如果要想跑出高分，修改程序增加连接池效果会好很多</p><p>3、有一定的学习成本</p>]]></content>
    
    
    <summary type="html">PostgreSQL下使用dbt5进行TPC-E测试</summary>
    
    
    
    <category term="数据库" scheme="https://blog.emplay.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://blog.emplay.top/2022/07/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://blog.emplay.top/2022/07/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-07-07T00:00:00.000Z</published>
    <updated>2022-08-02T10:00:01.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="为什么使用正则"><a href="#为什么使用正则" class="headerlink" title="为什么使用正则"></a>为什么使用正则</h3><p>正则表达式为高级的文本模式匹配、抽取、与&#x2F;或文本形式的搜索和替换功能提供了基础。正则表达式是一些由字符和特殊符合组成的字符串，描述了模式的重复或表述多个字符。正则表达式能按照某种模式匹配一系列有相似特征的字符串。<br>Python通过标准库中的re模块来支持正则表达式。</p><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>元字符是一系列特殊符号和字符，正是它给予正则表达式强大的功能和灵活性。<br>常见正则表达式和特殊符号</p><table><thead><tr><th align="left">元字符</th><th align="left">描述</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">literal</td><td align="left">匹配文本字符串的字面值literal</td><td align="left">foo</td></tr><tr><td align="left">re1|re2</td><td align="left">匹配正则表达式re1或re2</td><td align="left">foo|bar</td></tr><tr><td align="left">.</td><td align="left">匹配除\n外的任意字符</td><td align="left">a.b</td></tr><tr><td align="left">^</td><td align="left">匹配字符串起始部分</td><td align="left">^ab</td></tr><tr><td align="left">$</td><td align="left">匹配字符串终止部分</td><td align="left">ab$</td></tr><tr><td align="left">*</td><td align="left">匹配0次或多次前面出现的正则表达式</td><td align="left">[A-Z]*</td></tr><tr><td align="left">+</td><td align="left">匹配1次或多次前面出现的正则表达式</td><td align="left">[A-Z]+</td></tr><tr><td align="left">?</td><td align="left">匹配0次或1次前面出现的正则表达式</td><td align="left">ab?</td></tr><tr><td align="left">{N}</td><td align="left">匹配N次前面出现的正则表达式</td><td align="left">[0-9]{2}</td></tr><tr><td align="left">{M,N}</td><td align="left">匹配M~N次前面出现的正则表达式</td><td align="left">[0-9]{2,3}</td></tr><tr><td align="left">[a-z]</td><td align="left">匹配字符集中出现的任一字符</td><td align="left">[ab]</td></tr><tr><td align="left">[a-z]</td><td align="left">匹配a~z范围中的任一字符</td><td align="left">[a-z]</td></tr><tr><td align="left">[^ab]</td><td align="left">不匹配字符集中的字符，可以使用范围字符</td><td align="left">[^ab]</td></tr><tr><td align="left">(*|+|?|{})?</td><td align="left">用于匹配上面频繁出现、重复出现符号的非贪婪版本（*、+、？、{}）</td><td align="left">.*?[a-z]</td></tr><tr><td align="left">(…)</td><td align="left">匹配封闭的正则表达式，然后另存为子组</td><td align="left">([0-9]{3})？,f(oo</td></tr><tr><td align="left">\d</td><td align="left">匹配十进制数字，相当于[0-9]，与\D相反</td><td align="left">ab\d</td></tr><tr><td align="left">\w</td><td align="left">匹配任意字母数字，相当于[A-Za-Z0-9]，与、\W相反</td><td align="left">[A-Za-z_]\w</td></tr><tr><td align="left">\s</td><td align="left">匹配任意空格字符，相当于[\n\t\r\v\f]，与\S相反</td><td align="left">of\sthe</td></tr><tr><td align="left">\b</td><td align="left">匹配单词边界，与\B相反</td><td align="left">\bThe\b</td></tr><tr><td align="left">\N</td><td align="left">匹配以保存的子组N，参见(…)</td><td align="left">ab:\2</td></tr><tr><td align="left">\c</td><td align="left">逐字匹配任何特殊字符c，斜线是转义</td><td align="left">,</td></tr><tr><td align="left">\A(\Z)</td><td align="left">匹配字符串的起始（结束）</td><td align="left">\Acd</td></tr><tr><td align="left">(?iLmsux)</td><td align="left">在正则表达式中嵌入一个或多个特殊“标记”参数</td><td align="left">(?x),(? im)</td></tr><tr><td align="left">(?:…)</td><td align="left">表示一个匹配不用保存的分组</td><td align="left">(?:\w+\.)*</td></tr><tr><td align="left">(?P<name>…)</td><td align="left">像一个仅由name标识而不是数字ID标识的正则分组匹配</td><td align="left">(?P<data>)</td></tr><tr><td align="left">(?P&#x3D;name)</td><td align="left">在同一字符串中匹配由(?P&lt;\name)分组的之前文本</td><td align="left">(?P&#x3D;data)</td></tr><tr><td align="left">(?#…)</td><td align="left">表示注释，所有内容都被忽略</td><td align="left">(?#comment)</td></tr><tr><td align="left">(?&#x3D;…)</td><td align="left">匹配条件是如果…出现在之后的位置，而不使用输入字符串；称作正向前视断言</td><td align="left">(?&#x3D;.com)</td></tr><tr><td align="left">(?!…)</td><td align="left">匹配条件是如果…不出现在之后的位置，而不使用输入字符串；称作负向前视断言</td><td align="left">(?!.net)</td></tr><tr><td align="left">(?&lt;&#x3D;…)</td><td align="left">匹配条件是如果…出现在之前的位置，而不使用输入字符串；称作正向后视断言</td><td align="left">(?&lt;&#x3D;800-)</td></tr><tr><td align="left">(?&lt;!…)</td><td align="left">匹配条件是如果…不出现在之前的位置，而不使用输入字符串；称作负向后视断言</td><td align="left">(?&lt;!192\.168\.)</td></tr><tr><td align="left">(?(id&#x2F;name)Y|N)</td><td align="left">如果分组所提供的id或者name（名称）存在，就返回正则表达式的条件匹配Y，如果不存在，就返回N；</td><td align="left">N是可选项</td></tr></tbody></table><h3 id="使用择一符号匹配多个正则表达式模式"><a href="#使用择一符号匹配多个正则表达式模式" class="headerlink" title="使用择一符号匹配多个正则表达式模式"></a>使用择一符号匹配多个正则表达式模式</h3><p>表示择一匹配的是管道符(|)，用于分割不同的正则表达式。也称作并（union）、逻辑或（OR）</p><h3 id="使用闭包操作符是想存在性和频数匹配"><a href="#使用闭包操作符是想存在性和频数匹配" class="headerlink" title="使用闭包操作符是想存在性和频数匹配"></a>使用闭包操作符是想存在性和频数匹配</h3><p>星号将匹配其左边的正则表达式出现零次或多次的情况，该操作成为Kleene闭包；加号将匹配一次货多次出现的正则表达式，称为正闭包操作符。其他如问号匹配零次或一次，大括号匹配N次或一个范围。<br>如果问号紧跟在任何使用闭合操作符的匹配后面，将匹配尽可能少的次数，非贪婪匹配。<br>当模式匹配使用分组操作符时，正则表达式引擎将试图“吸收”匹配该模式的尽可能多的字符。这通常被叫做贪婪匹配。</p><table><thead><tr><th align="left">正则表达式</th><th align="left">匹配字符串</th></tr></thead><tbody><tr><td align="left">[dn]ot?</td><td align="left">字母“d”或者“n”，后面跟着一个“o”，然后是最多一个“t”，例如，do、no、dot、not</td></tr><tr><td align="left">0?[1-9]</td><td align="left">任何数值数字，它可能前置一个“0”，例如，匹配一系列数（表示从1～9月的数值），不管是一个还是两个数字</td></tr><tr><td align="left">[0-9]{15,16}</td><td align="left">匹配15或者16个数字（例如信用卡号码）</td></tr><tr><td align="left">&lt;&#x2F;?[^&gt;]+&gt;</td><td align="left">匹配全部有效的（和无效的）HTML标签</td></tr><tr><td align="left">[KQRBNP][a-h][1-8]-[a-h][1-8]</td><td align="left">在“长代数”标记法中，表示国际象棋合法的棋盘移动（仅移动，不包括吃子和将军）。即“K”、“Q”、“R”、“B”、“N”或“P”等字母后面加上“a1”～“h8”之间的棋盘坐标。前面的坐标表示从哪里开始走棋，后面的坐标代表走到哪个位置（棋格）上</td></tr></tbody></table><h3 id="使用圆括号指定分组"><a href="#使用圆括号指定分组" class="headerlink" title="使用圆括号指定分组"></a>使用圆括号指定分组</h3><p>圆括号功能</p><ul><li>对正则表达式进行分组</li><li>匹配子组</li></ul><table><thead><tr><th align="left">正则表达式</th><th align="left">匹配字符串</th></tr></thead><tbody><tr><td align="left">\d+(.\d*)?</td><td align="left">表示简单浮点数的字符串；也就是说，任何十进制数字，后面可以接一个小数点和零个或者多个十进制数字，例如“0.004”、“2”、“75.”等</td></tr><tr><td align="left">(Mr?s?.)?[A-Z][a-z]*[A-Za-z-]+</td><td align="left">名字和姓氏，以及对名字的限制（如果有，首字母必须大写，后续字母小写），全名前可以有可选的“Mr.”、“Mrs.”、“Ms.”或者“M.”作为称谓，以及灵活可选的姓氏，可以有多个单词、横线以及大写字母</td></tr></tbody></table><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><table><thead><tr><th align="left">正则表达式</th><th align="left">匹配字符串</th></tr></thead><tbody><tr><td align="left">(?:\w+.)*</td><td align="left">以句点作为结尾的字符串，例如“google.”、“twitter.”、“facebook.”，但是这些匹配不会保存下来供后续的使用和数据检索</td></tr><tr><td align="left">(?#comment)</td><td align="left">此处并不做匹配，只是作为注释</td></tr><tr><td align="left">(?&#x3D;.com)</td><td align="left">如果一个字符串后面跟着“.com”才做匹配操作，并不使用任何目标字符串</td></tr><tr><td align="left">(?!.net)</td><td align="left">如果一个字符串后面不是跟着“.net”才做匹配操作</td></tr><tr><td align="left">(?&lt;&#x3D;800-)</td><td align="left">如果字符串之前为“800-”才做匹配，假定为电话号码，同样，并不使用任何输入字符串</td></tr><tr><td align="left">(?&lt;!192.168.)</td><td align="left">如果一个字符串之前不是“192.168.”才做匹配操作，假定用于过滤掉一组C类IP地址</td></tr><tr><td align="left">(?(1)y|x)</td><td align="left">如果一个匹配组1（\1）存在，就与y匹配；否则，就与x匹配</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">Python中的正则表达式</summary>
    
    
    
    <category term="编程语言" scheme="https://blog.emplay.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="python,正则表达式" scheme="https://blog.emplay.top/tags/python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
</feed>
