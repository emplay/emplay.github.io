<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>emplay</title>
  
  <subtitle>嘟爸知识库</subtitle>
  <link href="https://blog.emplay.top/atom.xml" rel="self"/>
  
  <link href="https://blog.emplay.top/"/>
  <updated>2022-07-19T12:00:04.181Z</updated>
  <id>https://blog.emplay.top/</id>
  
  <author>
    <name>emplay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://blog.emplay.top/2022/07/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://blog.emplay.top/2022/07/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-07-07T00:00:00.000Z</published>
    <updated>2022-07-19T12:00:04.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="为什么使用正则"><a href="#为什么使用正则" class="headerlink" title="为什么使用正则"></a>为什么使用正则</h3><p>正则表达式为高级的文本模式匹配、抽取、与&#x2F;或文本形式的搜索和替换功能提供了基础。正则表达式是一些由字符和特殊符合组成的字符串，描述了模式的重复或表述多个字符。正则表达式能按照某种模式匹配一系列有相似特征的字符串。<br>Python通过标准库中的re模块来支持正则表达式。</p><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>元字符是一系列特殊符号和字符，正是它给予正则表达式强大的功能和灵活性。<br>常见正则表达式和特殊符号</p><table><thead><tr><th align="left">元字符</th><th align="left">描述</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">literal</td><td align="left">匹配文本字符串的字面值literal</td><td align="left">foo</td></tr><tr><td align="left">re1|re2</td><td align="left">匹配正则表达式re1或re2</td><td align="left">foo|bar</td></tr><tr><td align="left">.</td><td align="left">匹配除\n外的任意字符</td><td align="left">a.b</td></tr><tr><td align="left">^</td><td align="left">匹配字符串起始部分</td><td align="left">^ab</td></tr><tr><td align="left">$</td><td align="left">匹配字符串终止部分</td><td align="left">ab$</td></tr><tr><td align="left">*</td><td align="left">匹配0次或多次前面出现的正则表达式</td><td align="left">[A-Z]*</td></tr><tr><td align="left">+</td><td align="left">匹配1次或多次前面出现的正则表达式</td><td align="left">[A-Z]+</td></tr><tr><td align="left">?</td><td align="left">匹配0次或1次前面出现的正则表达式</td><td align="left">ab?</td></tr><tr><td align="left">{N}</td><td align="left">匹配N次前面出现的正则表达式</td><td align="left">[0-9]{2}</td></tr><tr><td align="left">{M,N}</td><td align="left">匹配M~N次前面出现的正则表达式</td><td align="left">[0-9]{2,3}</td></tr><tr><td align="left">[a-z]</td><td align="left">匹配字符集中出现的任一字符</td><td align="left">[ab]</td></tr><tr><td align="left">[a-z]</td><td align="left">匹配a~z范围中的任一字符</td><td align="left">[a-z]</td></tr><tr><td align="left">[^ab]</td><td align="left">不匹配字符集中的字符，可以使用范围字符</td><td align="left">[^ab]</td></tr><tr><td align="left">(*|+|?|{})?</td><td align="left">用于匹配上面频繁出现、重复出现符号的非贪婪版本（*、+、？、{}）</td><td align="left">.*?[a-z]</td></tr><tr><td align="left">(…)</td><td align="left">匹配封闭的正则表达式，然后另存为子组</td><td align="left">([0-9]{3})？,f(oo</td></tr><tr><td align="left">\d</td><td align="left">匹配十进制数字，相当于[0-9]，与\D相反</td><td align="left">ab\d</td></tr><tr><td align="left">\w</td><td align="left">匹配任意字母数字，相当于[A-Za-Z0-9]，与、\W相反</td><td align="left">[A-Za-z_]\w</td></tr><tr><td align="left">\s</td><td align="left">匹配任意空格字符，相当于[\n\t\r\v\f]，与\S相反</td><td align="left">of\sthe</td></tr><tr><td align="left">\b</td><td align="left">匹配单词边界，与\B相反</td><td align="left">\bThe\b</td></tr><tr><td align="left">\N</td><td align="left">匹配以保存的子组N，参见(…)</td><td align="left">ab:\2</td></tr><tr><td align="left">\c</td><td align="left">逐字匹配任何特殊字符c，斜线是转义</td><td align="left">,</td></tr><tr><td align="left">\A(\Z)</td><td align="left">匹配字符串的起始（结束）</td><td align="left">\Acd</td></tr><tr><td align="left">(?iLmsux)</td><td align="left">在正则表达式中嵌入一个或多个特殊“标记”参数</td><td align="left">(?x),(? im)</td></tr><tr><td align="left">(?:…)</td><td align="left">表示一个匹配不用保存的分组</td><td align="left">(?:\w+\.)*</td></tr><tr><td align="left">(?P<name>…)</td><td align="left">像一个仅由name标识而不是数字ID标识的正则分组匹配</td><td align="left">(?P<data>)</td></tr><tr><td align="left">(?P&#x3D;name)</td><td align="left">在同一字符串中匹配由(?P&lt;\name)分组的之前文本</td><td align="left">(?P&#x3D;data)</td></tr><tr><td align="left">(?#…)</td><td align="left">表示注释，所有内容都被忽略</td><td align="left">(?#comment)</td></tr><tr><td align="left">(?&#x3D;…)</td><td align="left">匹配条件是如果…出现在之后的位置，而不使用输入字符串；称作正向前视断言</td><td align="left">(?&#x3D;.com)</td></tr><tr><td align="left">(?!…)</td><td align="left">匹配条件是如果…不出现在之后的位置，而不使用输入字符串；称作负向前视断言</td><td align="left">(?!.net)</td></tr><tr><td align="left">(?&lt;&#x3D;…)</td><td align="left">匹配条件是如果…出现在之前的位置，而不使用输入字符串；称作正向后视断言</td><td align="left">(?&lt;&#x3D;800-)</td></tr><tr><td align="left">(?&lt;!…)</td><td align="left">匹配条件是如果…不出现在之前的位置，而不使用输入字符串；称作负向后视断言</td><td align="left">(?&lt;!192\.168\.)</td></tr><tr><td align="left">(?(id&#x2F;name)Y|N)</td><td align="left">如果分组所提供的id或者name（名称）存在，就返回正则表达式的条件匹配Y，如果不存在，就返回N；</td><td align="left">N是可选项</td></tr></tbody></table><h3 id="使用择一符号匹配多个正则表达式模式"><a href="#使用择一符号匹配多个正则表达式模式" class="headerlink" title="使用择一符号匹配多个正则表达式模式"></a>使用择一符号匹配多个正则表达式模式</h3><p>表示择一匹配的是管道符(|)，用于分割不同的正则表达式。也称作并（union）、逻辑或（OR）</p><h3 id="使用闭包操作符是想存在性和频数匹配"><a href="#使用闭包操作符是想存在性和频数匹配" class="headerlink" title="使用闭包操作符是想存在性和频数匹配"></a>使用闭包操作符是想存在性和频数匹配</h3><p>星号将匹配其左边的正则表达式出现零次或多次的情况，该操作成为Kleene闭包；加号将匹配一次货多次出现的正则表达式，称为正闭包操作符。其他如问号匹配零次或一次，大括号匹配N次或一个范围。<br>如果问号紧跟在任何使用闭合操作符的匹配后面，将匹配尽可能少的次数，非贪婪匹配。<br>当模式匹配使用分组操作符时，正则表达式引擎将试图“吸收”匹配该模式的尽可能多的字符。这通常被叫做贪婪匹配。</p><table><thead><tr><th align="left">正则表达式</th><th align="left">匹配字符串</th></tr></thead><tbody><tr><td align="left">[dn]ot?</td><td align="left">字母“d”或者“n”，后面跟着一个“o”，然后是最多一个“t”，例如，do、no、dot、not</td></tr><tr><td align="left">0?[1-9]</td><td align="left">任何数值数字，它可能前置一个“0”，例如，匹配一系列数（表示从1～9月的数值），不管是一个还是两个数字</td></tr><tr><td align="left">[0-9]{15,16}</td><td align="left">匹配15或者16个数字（例如信用卡号码）</td></tr><tr><td align="left">&lt;&#x2F;?[^&gt;]+&gt;</td><td align="left">匹配全部有效的（和无效的）HTML标签</td></tr><tr><td align="left">[KQRBNP][a-h][1-8]-[a-h][1-8]</td><td align="left">在“长代数”标记法中，表示国际象棋合法的棋盘移动（仅移动，不包括吃子和将军）。即“K”、“Q”、“R”、“B”、“N”或“P”等字母后面加上“a1”～“h8”之间的棋盘坐标。前面的坐标表示从哪里开始走棋，后面的坐标代表走到哪个位置（棋格）上</td></tr></tbody></table><h3 id="使用圆括号指定分组"><a href="#使用圆括号指定分组" class="headerlink" title="使用圆括号指定分组"></a>使用圆括号指定分组</h3><p>圆括号功能</p><ul><li>对正则表达式进行分组</li><li>匹配子组</li></ul><table><thead><tr><th align="left">正则表达式</th><th align="left">匹配字符串</th></tr></thead><tbody><tr><td align="left">\d+(.\d*)?</td><td align="left">表示简单浮点数的字符串；也就是说，任何十进制数字，后面可以接一个小数点和零个或者多个十进制数字，例如“0.004”、“2”、“75.”等</td></tr><tr><td align="left">(Mr?s?.)?[A-Z][a-z]*[A-Za-z-]+</td><td align="left">名字和姓氏，以及对名字的限制（如果有，首字母必须大写，后续字母小写），全名前可以有可选的“Mr.”、“Mrs.”、“Ms.”或者“M.”作为称谓，以及灵活可选的姓氏，可以有多个单词、横线以及大写字母</td></tr></tbody></table><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><table><thead><tr><th align="left">正则表达式</th><th align="left">匹配字符串</th></tr></thead><tbody><tr><td align="left">(?:\w+.)*</td><td align="left">以句点作为结尾的字符串，例如“google.”、“twitter.”、“facebook.”，但是这些匹配不会保存下来供后续的使用和数据检索</td></tr><tr><td align="left">(?#comment)</td><td align="left">此处并不做匹配，只是作为注释</td></tr><tr><td align="left">(?&#x3D;.com)</td><td align="left">如果一个字符串后面跟着“.com”才做匹配操作，并不使用任何目标字符串</td></tr><tr><td align="left">(?!.net)</td><td align="left">如果一个字符串后面不是跟着“.net”才做匹配操作</td></tr><tr><td align="left">(?&lt;&#x3D;800-)</td><td align="left">如果字符串之前为“800-”才做匹配，假定为电话号码，同样，并不使用任何输入字符串</td></tr><tr><td align="left">(?&lt;!192.168.)</td><td align="left">如果一个字符串之前不是“192.168.”才做匹配操作，假定用于过滤掉一组C类IP地址</td></tr><tr><td align="left">(?(1)y|x)</td><td align="left">如果一个匹配组1（\1）存在，就与y匹配；否则，就与x匹配</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">Python中的正则表达式</summary>
    
    
    
    <category term="编程语言" scheme="https://blog.emplay.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="python,正则表达式" scheme="https://blog.emplay.top/tags/python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
</feed>
